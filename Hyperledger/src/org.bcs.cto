/* 

* Licensed under the Apache License, Version 2.0 (the "License"); 

* you may not use this file except in compliance with the License. 

* You may obtain a copy of the License at 

* 

* http://www.apache.org/licenses/LICENSE-2.0 

* 

* Unless required by applicable law or agreed to in writing, software 

* distributed under the License is distributed on an "AS IS" BASIS, 

* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 

* See the License for the specific language governing permissions and 

* limitations under the License. 

*/ 

 
 

/** 

* Write your model definitions here 

*/ 

 
 

namespace org.bcs 

 
 

participant Organization identified by orgId { 

o String orgId 

o String organization_name 

o String geographic_pin 

o OrganizationType type 

o String ip_address default = '000.000.000.000' 

o String reputation default = '0' 

o TaskList[] task_list 
 
o String wallet

} 

asset TaskList identified by task_id { 

o String task_id 

o String qom_qod 

o Boolean free_rider

} 

asset Task identified by task_id { 

o String task_id default = '00123' 

--> Organization task_owner 

--> Organization task_receiver 

o Deposit requestor_deposit optional
  
o Deposit detectr_mitigatr_deposit optional

o TaskType task_type 

o String task_evaluation 

o TaskStatus task_status 

o String hash_url 

o String reputation_threshold 

} 

asset Deposit identified by deposit_id { 

o String deposit_id default = '12345' 

o DepositType type 

o String reward optional 

o String monetary_penalty optional 

o String total optional 

o String reputation_value optional 
  --> Organization owner

} 

 
 

asset Detection identified by detectionid { 

o String detectionid 

o Integer resources 

o Integer[] v_i_vector_quant 

o Integer[] detection_response_time 

o Integer[] suspiciousness_score 

} 

 
 

asset Mitigation identified by mitigationid { 

o String mitigationid 

o Integer free_resources 

o Integer[] mitigation_score 

o Integer[] mitigation_response_time 

} 

 
 

transaction Mitigate { 

--> Task task 

--> Organization requestor 

--> Organization mitigator 

--> Mitigation mitigation optional

  o Integer[] reputation_list

  o String QVMIp 

} 

 
 

transaction Detect { 

--> Task task 

--> Organization requestor 

--> Organization mitigator 

--> Detection detection optional 
  
  o Integer[] reputation_list

  o String QVMIp 

} 
  

transaction SendRequest {
  
--> Task task 

--> Organization requestor 

--> Organization mitigator 
  
}
  
  transaction SearchResolvers {
  
  --> Organization requestor
  
  o Integer threshold_reputation
  
}
  
  
   transaction AcceptRequest {
  
--> Task task 

--> Organization requestor 

--> Organization mitigator 
  
  o String stake_value
  
  o DepositType type
  
}
  event RequestEvent {
  
   o Task task
  
   o Organization requestor
  
   o Organization mitigator
}
  
  event SearchResolverEvent {
  
  o String requestor_id 
  
  o Organization[] org_list
  
  o Integer threshold_reputation
}
 

event DetectionEvent{ 

o String QVMIp 

o Detection detection 

o String final_score 

} 
  
   event AcceptEvent {
  
   o Task task
  
   o Organization requestor
  
   o Organization mitigator
}

 
 

event MitigationEvent{ 

o String QVMIp 

o Mitigation mitigation 

o String final_score 

} 

 

enum DepositType { 

o VALUE 

o REPUTATION 

} 

 
 

enum OrganizationType { 

o REQUESTOR 

o DETECTOR 

o MITIGATOR 

} 

 
 

enum TaskType { 

o REQUEST

o DETECT 

o MITGATE 

} 

  
  enum TaskStatus {
  
  o TASK_CREATED
  
  o TASK_ACCEPTED
  
  o TASK_RESTARTED
  
  o TASK_DONE
  
  o TASK_FAILED
}
 